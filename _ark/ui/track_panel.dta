#define TRACK_END_FRAME
(1920)
(new Object fc_bass_callback ;remove FC groove on bass miss/pass
   (hit
      {if {! $bass_firstnote} {set $bass_firstnote TRUE}}
	  {if {! $bass_milosong} {set $bass_milosong TRUE} {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}}
      {$this check_fc}
      {set [num_gems_hit] {'+' [num_gems_hit] 1}}
      {set [num_gems_combo] {'+' [num_gems_combo] 1}}
      {unless {modifier_mgr is_modifier_active mod_legacybass} {if {&& {> [num_gems_combo] 39} {! $bass_groove_active}} {set $bass_groove_active TRUE} {{{{get_track_panel} find bass} find BassSuperStreak_ON.trig} trigger}}}
	  )
   (miss
      {unless {! $bass_firstnote}
	  {set [num_gems_miss] {'+' [num_gems_miss] 1}}
	  {set [num_gems_combo] 0}
      {$this check_missed}
	  {{{{get_track_panel} find bass} find streak_meter} star_deploy_stop}
      {bass stop_deploy}}
	  )
   (pass
      {if {! $bass_firstnote} {set $bass_firstnote TRUE}}
	  {if {! $bass_milosong} {set $bass_milosong TRUE} {set [num_gems_hit] 1} {set [num_gems_miss] 1} {set [num_gems_pass] 1} {set [num_gems_combo] 1}}
	  {set [num_gems_pass] {'+' [num_gems_pass] 1}}
	  {set [num_gems_combo] 0}
      {$this check_missed}
	  {{{{get_track_panel} find bass} find streak_meter} star_deploy_stop}
      {bass stop_deploy}
	  )
   (check_fc
      {$this check_missed}
      {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
        {{{{get_track_panel} find bass} find streak_meter} star_deploy}
        {bass deploy}}
	  )
   (check_missed
	  {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
      {{{{get_track_panel} find bass} find streak_meter} star_deploy_stop}
      {bass stop_deploy}}
      {unless {modifier_mgr is_modifier_active mod_legacybass} {if {< [num_gems_combo] 39} {set $bass_groove_active FALSE} {{{{get_track_panel} find bass} find BassSuperStreak_OFF.trig} trigger}}}
	  )
   (num_gems_hit 0)
   (num_gems_combo 0)
   (num_gems_miss 0)
   (num_gems_pass 0)
)

(new Object fc_guitar_callback ;remove FC groove on guitar miss/pass
   (hit
      {if {! $guitar_firstnote} {set $guitar_firstnote TRUE}}
	  {if {! $guitar_milosong} {set $guitar_milosong TRUE} {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}}
      {$this check_fc}
      {set [num_gems_hit] {'+' [num_gems_hit] 1}}
      {set [num_gems_combo] {'+' [num_gems_combo] 1}}
      {unless {modifier_mgr is_modifier_active mod_legacybass} {if {&& {> [num_gems_combo] 29} {! $guitar_groove_active}} {set $guitar_groove_active TRUE} {{{{get_track_panel} find guitar} find BassSuperStreak_ON.trig} trigger}}}
	  )
   (miss
      {unless {! $guitar_firstnote}
	  {set [num_gems_miss] {'+' [num_gems_miss] 1}}
	  {set [num_gems_combo] 0}
      {$this check_missed}
	  {{{{get_track_panel} find guitar} find streak_meter} star_deploy_stop}
      {guitar stop_deploy}}
	  )
   (pass
      {if {! $guitar_firstnote} {set $guitar_firstnote TRUE}}
	  {if {! $guitar_milosong} {set $guitar_milosong TRUE} {set [num_gems_hit] 1} {set [num_gems_miss] 1} {set [num_gems_pass] 1} {set [num_gems_combo] 1}}
	  {set [num_gems_pass] {'+' [num_gems_pass] 1}}
	  {set [num_gems_combo] 0}
      {$this check_missed}
	  {{{{get_track_panel} find guitar} find streak_meter} star_deploy_stop}
      {guitar stop_deploy}
	  )
   (check_fc
      {$this check_missed}
      {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
        {{{{get_track_panel} find guitar} find streak_meter} star_deploy}
        {guitar deploy}}
	  )
   (check_missed
	  {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
      {{{{get_track_panel} find guitar} find streak_meter} star_deploy_stop}
      {guitar stop_deploy}}
      {unless {modifier_mgr is_modifier_active mod_legacybass} {if {< [num_gems_combo] 29} {set $guitar_groove_active FALSE} {{{{get_track_panel} find guitar} find BassSuperStreak_OFF.trig} trigger}}}
	  )
   (num_gems_hit 0)
   (num_gems_combo 0)
   (num_gems_miss 0)
   (num_gems_pass 0)
)

(new Object fc_drum_callback ;remove FC groove on drum miss/pass
   (hit
      {if {! $drum_firstnote} {set $drum_firstnote TRUE}}
	  {if {! $drum_milosong} {set $drum_milosong TRUE} {set [num_gems_hit] 0} {set [num_gems_miss] 0} {set [num_gems_pass] 0} {set [num_gems_combo] 0}}
      {$this check_fc}
      {set [num_gems_hit] {'+' [num_gems_hit] 1}}
      {set [num_gems_combo] {'+' [num_gems_combo] 1}}
      {unless {modifier_mgr is_modifier_active mod_legacybass}  {if {&& {> [num_gems_combo] 29} {! $drum_groove_active}} {set $drum_groove_active TRUE} {{{{get_track_panel} find drum} find BassSuperStreak_ON.trig} trigger}}}
	  )
   (miss
      {unless {! $drum_firstnote}
	  {set [num_gems_miss] {'+' [num_gems_miss] 1}}
	  {set [num_gems_combo] 0}
      {$this check_missed}
	  {{{{get_track_panel} find drum} find streak_meter} star_deploy_stop}
      {drum stop_deploy}}
	  )
   (pass
      {if {! $drum_firstnote} {set $drum_firstnote TRUE}}
	  {if {! $drum_milosong} {set $drum_milosong TRUE} {set [num_gems_hit] 1} {set [num_gems_miss] 1} {set [num_gems_pass] 1} {set [num_gems_combo] 1}}
	  {set [num_gems_pass] {'+' [num_gems_pass] 1}}
	  {set [num_gems_combo] 0}
      {$this check_missed}
	  {{{{get_track_panel} find drum} find streak_meter} star_deploy_stop}
      {drum stop_deploy}
	  )
   (check_fc
      {$this check_missed}
      {if {== {'+' [num_gems_pass] [num_gems_miss]} 0}
        {{{{get_track_panel} find drum} find streak_meter} star_deploy}
        {drum deploy}}
	  )
   (check_missed
	  {if {> {'+' [num_gems_miss] [num_gems_pass]} 0}
      {{{{get_track_panel} find drum} find streak_meter} star_deploy_stop}
      {drum stop_deploy}}
      {unless {modifier_mgr is_modifier_active mod_legacybass} {if {< [num_gems_combo] 29} {set $drum_groove_active FALSE} {{{{get_track_panel} find drum} find BassSuperStreak_OFF.trig} trigger}}}
	  )
   (num_gems_hit 0)
   (num_gems_combo 0)
   (num_gems_miss 0)
   (num_gems_pass 0)
)

#define TRACK_PANEL_HANDLERS
((enter
      {game add_sink $this}
	  {unless {gamemode get is_h2h_arrangement}
         {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
             {switch {$player instrument}
                (bass {$player add_sink fc_bass_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
                (guitar {$player add_sink fc_guitar_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})
                (drum {$player add_sink fc_drum_callback (hit miss pass check_fc check_missed num_gems_hit num_gems_combo num_gems_miss num_gems_pass)})}}}
      {{{gamemode get track_panel} loaded_dir} set view_time_easy {* {/ 2.4 $trackspeed} $speedmod}} ;implement track speed modifier
      {{{gamemode get track_panel} loaded_dir} set view_time_expert {* {/ 1.2 $trackspeed} $speedmod}}
      {$this
         set_showing
         {'||'
            $skip_intro
            {gamemode in_mode drum_trainer}
            {!
               {gamemode in_mode practice}}}})
   (exit
      {if
         {exists guitar_effects}
         {do
            {guitar_effects set_showing FALSE}}}
      {if
         {exists bass_effects}
         {do
            {bass_effects set_showing FALSE}}}
      {game remove_sink $this})
   (unison_hit)
   (unison_miss)
   (set_track_out)
   (set_track_in)
   (animate_track
      ($start $end $period $units))
   (animate_track_out)
   (animate_track_out_fast)
   (animate_track_in_fast)
   (finish_load
      {$this set_showing FALSE}
      {$this set_track_out})
   (intro_start
      {$this track_reset}
      {$this set_showing TRUE}
      {$this set_track_in})
   (intro_skip
      {$this track_reset}
      {$this set_showing TRUE}
      {$this set_track_out}
      {if
         {&&
            {exists gamemode}
            {!
               {gamemode get is_tutorial}}}
         {$this play_intro}})
   (configure_optimizations
      {do
         ($total_players 0)
         {if
            {exists beatmatch}
            {beatmatch
               foreach_active_player
               $player
               {'++' $total_players}}}
         #ifdef HX_PS3
         {set
            $optimization_lod
            {if_else
               {> $total_players 2}
               1
               0}}
         #else
         {set $optimization_lod 0}
         #endif
         {set $track_LOD $optimization_lod}})
   (on_reset
      {beatmatch
         foreach_active_player
         $m
         {$m on_new_track}
         {{$m track}
            init
            {$m track}}}
      {{$this loaded_dir}
         reset}
      {$this configure_optimizations})
   (on_extend
   {unless {gamemode get is_h2h_arrangement}
         {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
             {switch {$player instrument}
                (bass {{{{get_track_panel} find guitar} find streak_meter} star_deploy})
                (guitar {{{{get_track_panel} find guitar} find streak_meter} star_deploy})
                (drum {{{{get_track_panel} find guitar} find streak_meter} star_deploy})}}}
   {if $gemcustomtexture
      {{$this find prism_gems.tex} set_bitmap {sprint "ui/track/gems/prism_gems_" $gem ".png"}}
	  {if_else {exists {sprint "ui/track/gems/prism_gem_emissive_" $gem ".png"}}
		{do
			{{$this find prism_gem_emissive.tex} set_bitmap {sprint "ui/track/gems/prism_gem_emissive_" $gem ".png"}}
			{if_else {exists {sprint "ui/track/gems/prism_gem_emissive_3_player_" $gem ".png"}}
				{{$this find prism_gem_emissive_3_player.tex} set_bitmap {sprint "ui/track/gems/prism_gem_emissive_3_player_" $gem ".png"}}
				{{$this find prism_gem_emissive_3_player.tex} set_bitmap {sprint "ui/track/gems/prism_gem_emissive_" $gem ".png"}}
			}
		}
		{if {exists {sprint "ui/track/gems/prism_gem_emissive_3_player_" $gem ".png"}}
			{{$this find prism_gem_emissive.tex} set_bitmap {sprint "ui/track/gems/prism_gem_emissive_3_player_" $gem ".png"}}
		}
	  }
   }

   {if $smashercustomtexture
   {do
      {{$this find black_smasher_blue_nomip.tex} set_bitmap {sprint "ui/track/smashers/black_smasher_blue_" $smasher ".png"}}
      {{$this find black_smasher_green_nomip.tex} set_bitmap {sprint "ui/track/smashers/black_smasher_green_" $smasher ".png"}}
      {{$this find black_smasher_norm.tex} set_bitmap {sprint "ui/track/smashers/black_smasher_norm_" $smasher ".png"}}
      {{$this find black_smasher_spec.tex} set_bitmap {sprint "ui/track/smashers/black_smasher_spec_" $smasher ".png"}}
      {{$this find black_smasher_norm_drums.tex} set_bitmap {sprint "ui/track/smashers/black_smasher_norm_drums_" $smasher ".png"}}
      {{$this find black_smasher_orange_nomip.tex} set_bitmap {sprint "ui/track/smashers/black_smasher_orange_" $smasher ".png"}}
      {{$this find black_smasher_red_nomip.tex} set_bitmap {sprint "ui/track/smashers/black_smasher_red_" $smasher ".png"}}
      {{$this find black_smasher_yellow_nomip.tex} set_bitmap {sprint "ui/track/smashers/black_smasher_yellow_" $smasher ".png"}}
      {{$this find square_smasher_bright_blue.tex} set_bitmap {sprint "ui/track/smashers/square_smasher_bright_blue_" $smasher ".png"}}
      {{$this find square_smasher_bright_green.tex} set_bitmap {sprint "ui/track/smashers/square_smasher_bright_green_" $smasher ".png"}}
      {{$this find square_smasher_bright_orange.tex} set_bitmap {sprint "ui/track/smashers/square_smasher_bright_orange_" $smasher ".png"}}
      {{$this find square_smasher_bright_red.tex} set_bitmap {sprint "ui/track/smashers/square_smasher_bright_red_" $smasher ".png"}}
      {{$this find square_smasher_bright_yellow.tex} set_bitmap {sprint "ui/track/smashers/square_smasher_bright_yellow_" $smasher ".png"}}
   }
   }
   {if $streakcustomtexture
      {{$this find bass_superstreak_pattern.tex} set_bitmap {sprint "ui/track/streak/" $streak ".png"}}
   }
   {if $spotlightcustomtexture
      {{$this find spotlight_bass_track.tex} set_bitmap {sprint "ui/track/spotlight/" $spotlight ".png"}}
      {{$this find spotlight_guitar_track.tex} set_bitmap {sprint "ui/track/spotlight/" $spotlight ".png"}}
      {{$this find spotlight_drums_track.tex} set_bitmap {sprint "ui/track/spotlight/" $spotlight ".png"}}
      {if_else {exists {sprint "ui/track/spotlight/" $spotlight "_emissive.png"}}
         {do
            {{$this find spotlight_bass_track_emissive.tex} set_bitmap {sprint "ui/track/spotlight/" $spotlight "_emissive.png"}}
            {{$this find spotlight_guitar_track_emmissive.tex} set_bitmap {sprint "ui/track/spotlight/" $spotlight "_emissive.png"}}
         }
         {do
            {{$this find spotlight_bass_track_emissive.tex} set_bitmap "ui/track/custom_track_textures/_no_highway.png"}
            {{$this find spotlight_guitar_track_emmissive.tex} set_bitmap "ui/track/custom_track_textures/_no_highway.png"}
         }
      }
   }
   
      {$this play_intro}
      {if
         {&&
            {exists gamemode}
            {gamemode get play_track_intro_sfx}}
         {synth play track_beg.cue}}
		 {unless {> {gamecfg get practice_speed} 0} {beatmatch set_music_speed $speedmod}}
		 {if {> {gamecfg get practice_speed} 0} {beatmatch set_music_speed $modifier}}))
{new
   TrackPanel
   coop_track_panel
   (file
      "track/trackpanel.milo")
   TRACK_PANEL_HANDLERS}
{new
   TrackPanel
   h2h_track_panel
   (file
      "track/trackpanel_h2h.milo")
   TRACK_PANEL_HANDLERS}
{func
   get_track_panel
   {gamemode get track_panel}}
{set
   $playback_file
   ""}